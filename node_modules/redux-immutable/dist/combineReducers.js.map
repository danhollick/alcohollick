{"version":3,"sources":["combineReducers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;kBASe,UAAC,QAAD,EAAgC;AAC3C,QAAI,uBAAJ,CAD2C;;AAG3C,kBAAc,OAAO,IAAP,CAAY,QAAZ,CAAd,CAH2C;;AAK3C,WAAO,UAAC,UAAD,EAAyB,MAAzB,EAAuD;AAC1D,YAAI,eAAe,SAAf,EAA0B;AAC5B,yBAAa,oBAAU,GAAV,EAAb,CAD4B;SAA9B;;;AAD0D,YAMtD,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,EAAuC;;AAEvC,gBAAI,0BAAJ,CAFuC;;AAIvC,6BAAiB,wDAAwC,UAAxC,EAAoD,QAApD,EAA8D,MAA9D,CAAjB,CAJuC;;AAMvC,gBAAI,cAAJ,EAAoB;;AAEhB,wBAAQ,KAAR,CAAc,cAAd;;AAFgB,aAApB;SANJ;;AAaA,eAAO,WACF,aADE,CACY,UAAC,cAAD,EAAoB;AAC/B,wBAAY,OAAZ,CAAoB,UAAC,WAAD,EAAiB;AACjC,oBAAI,8BAAJ;oBACI,2BADJ;oBAEI,mBAFJ,CADiC;;AAKjC,0BAAU,SAAS,WAAT,CAAV,CALiC;;AAOjC,qCAAqB,eAAe,GAAf,CAAmB,WAAnB,CAArB,CAPiC;;AASjC,kCAAkB,QAAQ,kBAAR,EAA4B,MAA5B,CAAlB,CATiC;;AAWjC,kDAAkB,eAAlB,EAAmC,WAAnC,EAAgD,MAAhD,EAXiC;;AAajC,+BAAe,GAAf,CAAmB,WAAnB,EAAgC,eAAhC,EAbiC;aAAjB,CAApB,CAD+B;SAApB,CADnB,CAnB0D;KAAvD,CALoC;CAAhC","file":"combineReducers.js","sourcesContent":["/* eslint-disable lodash3/prefer-lodash-method */\n\nimport {\n    getUnexpectedInvocationParameterMessage,\n    validateNextState\n} from './utilities';\n\nimport Immutable from 'immutable';\n\nexport default (reducers: Object): Function => {\n    let reducerKeys;\n\n    reducerKeys = Object.keys(reducers);\n\n    return (inputState: ?Immutable, action: Object): Immutable => {\n        if (inputState === undefined) {\n          inputState = Immutable.Map();\n        }\n\n        /* eslint-disable no-process-env */\n        if (process.env.NODE_ENV !== 'production') {\n        /* eslint-enable no-process-env */\n            let warningMessage;\n\n            warningMessage = getUnexpectedInvocationParameterMessage(inputState, reducers, action);\n\n            if (warningMessage) {\n                /* eslint-disable no-console */\n                console.error(warningMessage);\n                /* eslint-enable no-console */\n            }\n        }\n\n        return inputState\n            .withMutations((temporaryState) => {\n                reducerKeys.forEach((reducerName) => {\n                    let currentDomainState,\n                        nextDomainState,\n                        reducer;\n\n                    reducer = reducers[reducerName];\n\n                    currentDomainState = temporaryState.get(reducerName);\n\n                    nextDomainState = reducer(currentDomainState, action);\n\n                    validateNextState(nextDomainState, reducerName, action);\n\n                    temporaryState.set(reducerName, nextDomainState);\n                });\n            });\n    };\n};\n"],"sourceRoot":"/source/"}