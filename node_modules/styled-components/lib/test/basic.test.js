'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral([''], ['']),
    _templateObject2 = _taggedTemplateLiteral(['\n      color: blue;\n    '], ['\n      color: blue;\n    ']),
    _templateObject3 = _taggedTemplateLiteral(['color: red;'], ['color: red;']),
    _templateObject4 = _taggedTemplateLiteral(['color: blue;'], ['color: blue;']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _enzyme = require('enzyme');

var _mochaJsdom = require('mocha-jsdom');

var _mochaJsdom2 = _interopRequireDefault(_mochaJsdom);

var _StyleSheet = require('../models/StyleSheet');

var _StyleSheet2 = _interopRequireDefault(_StyleSheet);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var styled = void 0;

describe('basic', function () {
  /**
   * Make sure the setup is the same for every test
   */
  beforeEach(function () {
    styled = (0, _utils.resetStyled)();
  });

  it('should not throw an error when called', function () {
    styled.div(_templateObject);
  });

  it('should inject a stylesheet when a component is created', function () {
    var Comp = styled.div(_templateObject);
    (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
    (0, _expect2.default)(_StyleSheet2.default.injected).toBe(true);
  });

  it('should generate only component class by default', function () {
    styled.div(_templateObject);
    (0, _utils.expectCSSMatches)('.sc-a {}');
  });

  it('should generate only component class even if rendered if no styles are passed', function () {
    var Comp = styled.div(_templateObject);
    (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
    (0, _utils.expectCSSMatches)('.sc-a {}');
  });

  it('should inject styles', function () {
    var Comp = styled.div(_templateObject2);
    (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
    (0, _utils.expectCSSMatches)('.sc-a { } .b { color: blue; }');
  });

  it('should inject only once for a styled component, no matter how often it\'s mounted', function () {
    var Comp = styled.div(_templateObject2);
    (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
    (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
    (0, _utils.expectCSSMatches)('.sc-a {} .b { color: blue; }');
  });

  describe('jsdom tests', function () {
    (0, _mochaJsdom2.default)();

    it('should pass the ref to the component', function () {
      var Comp = styled.div(_templateObject);

      var Wrapper = function (_Component) {
        _inherits(Wrapper, _Component);

        function Wrapper() {
          var _ref;

          var _temp, _this, _ret;

          _classCallCheck(this, Wrapper);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).call.apply(_ref, [this].concat(args))), _this), _this.innerRef = function (comp) {
            _this.testRef = comp;
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(Wrapper, [{
          key: 'render',
          value: function render() {
            return _react2.default.createElement(Comp, { innerRef: this.innerRef });
          }
        }]);

        return Wrapper;
      }(_react.Component);

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Wrapper, null));
      var component = wrapper.find(Comp).first();

      // $FlowFixMe
      (0, _expect2.default)(wrapper.node.testRef).toBe(component.getDOMNode());
      (0, _expect2.default)(component.find('div').prop('innerRef')).toNotExist();
    });

    var InnerComponent = function (_Component2) {
      _inherits(InnerComponent, _Component2);

      function InnerComponent() {
        _classCallCheck(this, InnerComponent);

        return _possibleConstructorReturn(this, (InnerComponent.__proto__ || Object.getPrototypeOf(InnerComponent)).apply(this, arguments));
      }

      _createClass(InnerComponent, [{
        key: 'render',
        value: function render() {
          return null;
        }
      }]);

      return InnerComponent;
    }(_react.Component);

    it('should not leak the innerRef prop to the wrapped child', function () {
      var OuterComponent = styled(InnerComponent)(_templateObject);

      var Wrapper = function (_Component3) {
        _inherits(Wrapper, _Component3);

        function Wrapper() {
          _classCallCheck(this, Wrapper);

          return _possibleConstructorReturn(this, (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).apply(this, arguments));
        }

        _createClass(Wrapper, [{
          key: 'render',
          value: function render() {
            var _this4 = this;

            return _react2.default.createElement(OuterComponent, { innerRef: function innerRef(comp) {
                _this4.testRef = comp;
              } });
          }
        }]);

        return Wrapper;
      }(_react.Component);

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Wrapper, null));
      var innerComponent = wrapper.find(InnerComponent).first();

      // $FlowFixMe
      (0, _expect2.default)(wrapper.node.testRef).toBe(innerComponent.node);
      (0, _expect2.default)(innerComponent.prop('innerRef')).toNotExist();
    });

    it('should pass the full className to the wrapped child', function () {
      var OuterComponent = styled(InnerComponent)(_templateObject);

      var Wrapper = function (_Component4) {
        _inherits(Wrapper, _Component4);

        function Wrapper() {
          _classCallCheck(this, Wrapper);

          return _possibleConstructorReturn(this, (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).apply(this, arguments));
        }

        _createClass(Wrapper, [{
          key: 'render',
          value: function render() {
            return _react2.default.createElement(OuterComponent, { className: 'test' });
          }
        }]);

        return Wrapper;
      }(_react.Component);

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Wrapper, null));
      (0, _expect2.default)(wrapper.find(InnerComponent).prop('className')).toBe('test sc-a b');
    });

    it('should pass the innerRef to the wrapped styled component', function () {
      var InnerComponent = styled.div(_templateObject);
      var OuterComponent = styled(InnerComponent)(_templateObject);

      var Wrapper = function (_Component5) {
        _inherits(Wrapper, _Component5);

        function Wrapper() {
          var _ref2;

          var _temp2, _this6, _ret2;

          _classCallCheck(this, Wrapper);

          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return _ret2 = (_temp2 = (_this6 = _possibleConstructorReturn(this, (_ref2 = Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).call.apply(_ref2, [this].concat(args))), _this6), _this6.innerRef = function (comp) {
            _this6.testRef = comp;
          }, _temp2), _possibleConstructorReturn(_this6, _ret2);
        }

        _createClass(Wrapper, [{
          key: 'render',
          value: function render() {
            return _react2.default.createElement(OuterComponent, { innerRef: this.innerRef });
          }
        }]);

        return Wrapper;
      }(_react.Component);

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Wrapper, null));
      var innerComponent = wrapper.find(InnerComponent).first();
      var outerComponent = wrapper.find(OuterComponent).first();

      // $FlowFixMe
      (0, _expect2.default)(wrapper.node.testRef).toBe(innerComponent.getDOMNode());

      // $FlowFixMe
      (0, _expect2.default)(innerComponent.prop('innerRef')).toBe(wrapper.node.innerRef);
    });

    it('should respect the order of StyledComponent creation for CSS ordering', function () {
      var FirstComponent = styled.div(_templateObject3);
      var SecondComponent = styled.div(_templateObject4);

      // NOTE: We're mounting second before first and check if we're breaking their order
      (0, _enzyme.shallow)(_react2.default.createElement(SecondComponent, null));
      (0, _enzyme.shallow)(_react2.default.createElement(FirstComponent, null));

      (0, _utils.expectCSSMatches)('.sc-a {} .d { color: red; } .sc-b {} .c { color: blue; }');
    });
  });
});