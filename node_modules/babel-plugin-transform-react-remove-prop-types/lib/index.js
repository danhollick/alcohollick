'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var template = _ref.template,
      types = _ref.types;

  var wrapperIfTemplate = template('\n    if (process.env.NODE_ENV !== "production") {\n      NODE;\n    }\n  ');

  var VISITED_KEY = 'transform-react-remove-prop-types' + Date.now();

  return {
    visitor: {
      Program: function Program(programPath, state) {
        var mode = state.opts.mode || 'remove';

        // On program start, do an explicit traversal up front for this plugin.
        programPath.traverse({
          ObjectProperty: {
            exit: function exit(path) {
              var node = path.node;

              if (node.computed || node.key.name !== 'propTypes') {
                return;
              }

              var parent = path.findParent(function (currentNode) {
                if (currentNode.type !== 'CallExpression') {
                  return false;
                }

                return currentNode.get('callee').matchesPattern('React.createClass');
              });

              if (parent) {
                remove(path, {
                  visitedKey: VISITED_KEY,
                  wrapperIfTemplate: wrapperIfTemplate,
                  mode: mode,
                  type: 'createClass'
                });
              }
            }
          },
          // Here to support stage-1 transform-class-properties.
          ClassProperty: function ClassProperty(path) {
            var node = path.node,
                scope = path.scope;


            if (node.key.name === 'propTypes') {
              var pathClassDeclaration = scope.path;

              if (isReactClass(pathClassDeclaration.get('superClass'), scope)) {
                remove(path, {
                  visitedKey: VISITED_KEY,
                  wrapperIfTemplate: wrapperIfTemplate,
                  mode: mode,
                  type: 'class static',
                  types: types,
                  pathClassDeclaration: pathClassDeclaration
                });
              }
            }
          },
          AssignmentExpression: function AssignmentExpression(path) {
            var node = path.node,
                scope = path.scope;


            if (node.left.computed || !node.left.property || node.left.property.name !== 'propTypes') {
              return;
            }

            var className = node.left.object.name;
            var binding = scope.getBinding(className);

            if (!binding) {
              return;
            }

            if (binding.path.isClassDeclaration()) {
              var superClass = binding.path.get('superClass');

              if (isReactClass(superClass, scope)) {
                remove(path, {
                  visitedKey: VISITED_KEY,
                  wrapperIfTemplate: wrapperIfTemplate,
                  mode: mode,
                  type: 'class assign'
                });
              }
            } else if ((0, _isStatelessComponent2.default)(binding.path)) {
              remove(path, {
                visitedKey: VISITED_KEY,
                wrapperIfTemplate: wrapperIfTemplate,
                mode: mode,
                type: 'stateless'
              });
            }
          }
        });
      }
    }
  };
};

var _isStatelessComponent = require('./isStatelessComponent');

var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isPathReactClass(path) {
  if (path.matchesPattern('React.Component') || path.matchesPattern('React.PureComponent')) {
    return true;
  }

  if (path.node && (path.node.name === 'Component' || path.node.name === 'PureComponent')) {
    return true;
  }

  return false;
} //  weak

function isReactClass(superClass, scope) {
  var answer = false;

  if (isPathReactClass(superClass)) {
    answer = true;
  } else if (superClass.node.name) {
    // Check for inheritance
    var className = superClass.node.name;
    var binding = scope.getBinding(className);
    superClass = binding.path.get('superClass');

    if (isPathReactClass(superClass)) {
      answer = true;
    }
  }

  return answer;
}

function remove(path, options) {
  var visitedKey = options.visitedKey,
      wrapperIfTemplate = options.wrapperIfTemplate,
      mode = options.mode,
      type = options.type,
      types = options.types;


  if (mode === 'remove') {
    path.remove();
  } else if (mode === 'wrap') {
    // Prevent infinity loop.
    if (path.node[visitedKey]) {
      return;
    }

    path.node[visitedKey] = true;

    switch (type) {
      // This is legacy, we do not optimize it.
      case 'createClass':
        break;

      // Inspired from babel-plugin-transform-class-properties.
      case 'class static':
        {
          var ref = void 0;
          var pathClassDeclaration = options.pathClassDeclaration;

          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {
            ref = pathClassDeclaration.node.id;
          } else {
            // Class without name not supported
            return;
          }

          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value));

          // We need to append the node at the parent level in this case.
          if (pathClassDeclaration.parentPath.isExportDeclaration()) {
            pathClassDeclaration = pathClassDeclaration.parentPath;
          }
          pathClassDeclaration.insertAfter(node);

          path.remove();
          break;
        }

      case 'class assign':
      case 'stateless':
        path.replaceWith(wrapperIfTemplate({
          NODE: path.node
        }));
        break;

      default:
        break;
    }
  } else {
    throw new Error('transform-react-remove-prop-type: unsupported mode ' + mode + '.');
  }
}